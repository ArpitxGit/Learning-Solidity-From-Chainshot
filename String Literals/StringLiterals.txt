# The string literal "Hello World" is perfectly valid in Solidity.

The value "Hello World" can be described as a string literal which differentiates it from the string data type. 

Any fixed value could be a literal, "Hello World", 42, or true.

## A string literal can be stored in both the bytes and string types.

### For a long human-readable message it is recommended to use string since it will be easier to read the values from the blockchain storage from the outside (like for a front-end application).

If the string is *shorter than 32 bytes*, it is more efficient to store it in a fixed-size byte array like bytes32. This simplifies the computation since the memory is allocated ahead of time. On the other hand, both string and bytes will allocate their memory dynamically depending on the size of the string.

### Adding a character to either string will result in a compile-time error since the string literal would no longer fit into 32 bytes.

Quite often long strings are stored seperately on other distributed services like IPFS, with a hash representation stored on the blockchain (since storage on a blockchain is expensive!). For example, you could write a legal document and hash the contents along with digital signatures to prove that it was signed. As long as the original document is preserved it can be easily proven that it was signed by rehashing the contents.
